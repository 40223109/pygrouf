<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="course-mde-tw.20140417093332.1998"><vh>@settings</vh>
<v t="course-mde-tw.20140417093332.1999"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="course-mde-tw.20140417093332.2000"><vh>@string initial_split_orientation = horizontal</vh></v>
<v t="course-mde-tw.20140417093332.2001"><vh>@string rst3_write_intermediate_extension = .rst</vh></v>
</v>
<v t="amd.20160719104503.1"><vh>2016Fall PyGrouf 專案</vh></v>
<v t="amd.20160719110153.1"><vh>old remarks</vh>
<v t="2014spring.20140723175454.2635"><vh>2014Fall CP 雲端課程專案</vh>
<v t="2014fall.20140821113240.3140"><vh>帳號驗證</vh></v>
<v t="2014fall.20140821113240.3145"><vh>近端 MySQL 工具</vh></v>
<v t="2014fall.20140821113240.3139"><vh>資料庫 ORM</vh>
<v t="2014fall.20140821113240.3143"><vh>資料表設計</vh></v>
<v t="2014fall.20140821113240.3144"><vh>分頁設計</vh></v>
<v t="2014fall.20140821113240.3142"><vh>PHP SForum 參考</vh></v>
</v>
<v t="2014fall.20140821113240.3141"><vh>CMSimply 內容管理</vh></v>
</v>
<v t="amd.20150517161425.1"><vh>2015 Spring 接續開發</vh></v>
<v t="amd.20151026211307.1"><vh>2015 Fall 置入 authomatic</vh></v>
<v t="2014pythonE.20140422152422.1669"><vh>電子郵箱管理</vh></v>
<v t="2014pythonE.20140422152422.1671"><vh>Github 帳號管理</vh></v>
<v t="2014pythonE.20140422152422.1670"><vh>OpenShift 權限管理</vh></v>
<v t="course-mde-tw.20140422171455.1745"><vh>Github 倉儲與 OpenShift 同步</vh></v>
<v t="amd.20160719104851.1"><vh>old</vh>
<v t="2014fall.20140821113240.3147"><vh>Google Adsense 問題</vh></v>
<v t="2014fall.20140826101705.4467"><vh>CMSimply 已知問題</vh></v>
<v t="2015.20140824143250.2077"><vh>20140824 程式更動</vh></v>
<v t="2014fall.20140826101705.4466"><vh>20140826</vh></v>
<v t="2015.20140828002231.2093"><vh>20140828</vh></v>
<v t="2015.20140829105017.2095"><vh>20140829</vh></v>
<v t="2015.20140901003454.2095"><vh>20140901</vh></v>
<v t="2015.20140902161836.5388"><vh>20140903</vh></v>
<v t="2015.20140826151106.2090"><vh>pygroup_config</vh></v>
<v t="2015.20140916184224.2608"><vh>20140916 多人連線問題</vh></v>
<v t="2015.20140917185942.2149"><vh>PostgreSQL 相關變數</vh></v>
<v t="amd.20150517161644.1"><vh>20150517 改版並送到 Github</vh></v>
<v t="amd.20151026211514.1"><vh>20151026 修改 Gmail 登入</vh></v>
</v>
</v>
<v t="2014fall.20140821113240.3146" a="E"><vh>開發日誌</vh>
<v t="amd.20160719104919.1" a="E"><vh>20160719</vh>
<v t="amd.20160719131148.1"><vh>程式架構討論</vh></v>
</v>
</v>
<v t="amd.20160719105219.1" a="E"><vh>PyGrouf 程式區</vh>
<v t="amd.20160719105234.1"><vh>@edit setup.py</vh></v>
<v t="amd.20160719105442.1"><vh>@edit .gitignore</vh></v>
<v t="amd.20160719105308.1"><vh>@edit wsgi.py</vh></v>
<v t="amd.20160719105348.1" a="E"><vh>@clean flaskapp.py</vh>
<v t="amd.20160719105410.1"><vh>flaskapp declarations</vh></v>
<v t="amd.20160719125653.1"><vh>class Task</vh></v>
<v t="amd.20160719125734.1"><vh>class Pygroup</vh>
<v t="amd.20160719125734.2"><vh>__init__</vh></v>
<v t="amd.20160719125734.3"><vh>usermenu</vh></v>
<v t="amd.20160719125734.4"><vh>printuser</vh></v>
<v t="amd.20160719125734.5"><vh>taskform</vh></v>
<v t="amd.20160719125734.6"><vh>taskaction</vh></v>
<v t="amd.20160719125734.7"><vh>index (tasklist)</vh></v>
<v t="amd.20160719130552.1"><vh>index2</vh></v>
<v t="amd.20160719125734.8"><vh>allow_pass</vh></v>
<v t="amd.20160719125734.9"><vh>strip_tags</vh></v>
<v t="amd.20160719125734.10"><vh>client_ip</vh></v>
<v t="amd.20160719125734.11"><vh>default</vh></v>
<v t="amd.20160719125734.12"><vh>save_program</vh></v>
<v t="amd.20160719125734.13"><vh>login</vh></v>
<v t="amd.20160719125734.14"><vh>login (authomatic)</vh></v>
<v t="amd.20160719125734.15"><vh>logincheck</vh></v>
<v t="amd.20160719125734.16"><vh>logincheck (authomatic)</vh></v>
<v t="amd.20160719125734.17"><vh>editconfig</vh></v>
<v t="amd.20160719125734.18"><vh>editconfigform</vh></v>
<v t="amd.20160719125734.19"><vh>editadsense</vh></v>
<v t="amd.20160719125734.20"><vh>editadsenseform</vh></v>
<v t="amd.20160719125734.21"><vh>parse_config</vh></v>
<v t="amd.20160719125734.22"><vh>logout</vh></v>
<v t="amd.20160719125734.23"><vh>taskeditform</vh></v>
<v t="amd.20160719125734.24"><vh>taskedit</vh></v>
<v t="amd.20160719125734.25"><vh>taskdeleteform</vh></v>
<v t="amd.20160719125734.26"><vh>taskdelete</vh></v>
<v t="amd.20160719125734.27"><vh>tasksearchform</vh></v>
</v>
<v t="amd.20160719105410.2"><vh>index</vh></v>
<v t="amd.20160719105410.3"><vh>user</vh></v>
<v t="amd.20160719105410.4"><vh>red</vh></v>
<v t="amd.20160719105410.5"><vh>guessform</vh></v>
<v t="amd.20160719105410.6"><vh>docheck</vh></v>
<v t="amd.20160719105410.7"><vh>option</vh></v>
<v t="amd.20160719105410.8"><vh>optionaction</vh></v>
<v t="amd.20160719105410.9"><vh>fileaxupload</vh></v>
<v t="amd.20160719105410.10"><vh>fileuploadform</vh></v>
<v t="amd.20160719105410.11"><vh>imageaxupload</vh></v>
<v t="amd.20160719105410.12"><vh>imageuploadform</vh></v>
<v t="amd.20160719105410.13"><vh>download</vh></v>
<v t="amd.20160719105410.14"><vh>send_images</vh></v>
<v t="amd.20160719105410.15"><vh>send_static</vh></v>
<v t="amd.20160719105410.16"><vh>send_blog</vh></v>
<v t="amd.20160719105410.17"><vh>send_file</vh></v>
<v t="amd.20160719105410.18"><vh>login</vh></v>
<v t="amd.20160719105410.19"><vh>logout</vh></v>
<v t="amd.20160719105410.20"><vh>menu</vh></v>
<v t="amd.20160719105410.21"><vh>alogin</vh></v>
<v t="amd.20160719105410.22"><vh>alogin_check</vh></v>
</v>
<v t="amd.20160719132540.1" a="E"><vh>@clean pygroup.py</vh>
<v t="amd.20160719132540.2"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="amd.20160719132540.3"><vh>helloworld</vh></v>
<v t="amd.20160719132540.4"><vh>threegear</vh></v>
<v t="amd.20160719132540.5"><vh>canvas</vh></v>
<v t="amd.20160719132540.6"><vh>listfiles</vh></v>
<v t="amd.20160719132540.7"><vh>getfiles</vh></v>
</v>
</v>
<v t="course-mde-tw.20140417093332.2027" a="E"><vh>@path wsgi</vh>
<v t="2014spring.20140803093407.1974" a="E"><vh>@path static</vh>
<v t="2015.20140912081657.3041"><vh>@edit editor.py</vh></v>
<v t="2014spring.20140803093407.1975"><vh>@path templates</vh>
<v t="2014spring.20140803093407.1979"><vh>@edit usermenu.html</vh></v>
<v t="2015.20140829105017.2097"><vh>@edit login.html</vh></v>
<v t="2014spring.20140804092018.1988"><vh>@edit tasklist.html</vh></v>
<v t="2014spring.20140805082611.1991"><vh>@edit taskform.html</vh></v>
<v t="2014spring.20140818083129.2252"><vh>@edit taskeditform.html</vh></v>
<v t="2015.20140825203447.2082"><vh>@edit editconfigform.html</vh></v>
<v t="2015.20140826084958.2085"><vh>@edit editadsenseform.html</vh></v>
<v t="2014spring.20140820104632.1921"><vh>@edit taskdeleteform.html</vh></v>
<v t="2014spring.20140806131244.1912"><vh>@edit tasksearchform.html</vh></v>
<v t="2014spring.20140803093407.1978"><vh>@edit meta.html</vh></v>
<v t="2014spring.20140803093407.1976"><vh>@path style</vh>
<v t="2014spring.20140803093407.1977"><vh>@edit base.css</vh></v>
</v>
</v>
</v>
<v t="2014fall.20140821113240.3137" a="E"><vh>@clean application</vh>
<v t="2014fall.20140821113240.3138"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
</v>
<v t="2014fall.20140821113240.3105"><vh>@clean pygroup.py</vh>
<v t="2014fall.20140821113240.3106"><vh>&lt;&lt;declarations&gt;&gt; (pygroup)</vh></v>
<v t="2014fall.20140821113240.3107"><vh>class Task</vh></v>
<v t="2014fall.20140821113240.3108" a="E"><vh>class Pygroup</vh>
<v t="2014fall.20140821113240.3109"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3111"><vh>usermenu</vh></v>
<v t="2014fall.20140821113240.3112"><vh>printuser</vh></v>
<v t="2014fall.20140821113240.3113"><vh>taskform</vh></v>
<v t="2014fall.20140821113240.3114"><vh>taskaction</vh></v>
<v t="2014fall.20140821113240.3115"><vh>index (tasklist)</vh></v>
<v t="2015.20140824143250.2080"><vh>allow_pass</vh></v>
<v t="2015.20140830081045.4015"><vh>strip_tags</vh></v>
<v t="2014fall.20140821113240.3117"><vh>client_ip</vh></v>
<v t="2014fall.20140821113240.3118"><vh>default</vh></v>
<v t="2014fall.20140821113240.3119"><vh>save_program</vh></v>
<v t="2015.20140829105017.2096"><vh>login</vh></v>
<v t="amd.20151026211831.1"><vh>login (authomatic)</vh></v>
<v t="2014fall.20140821113240.3127"><vh>logincheck</vh></v>
<v t="amd.20151026211800.1"><vh>logincheck (authomatic)</vh></v>
<v t="2015.20140825203447.2081"><vh>editconfig</vh></v>
<v t="2015.20140825203447.2080"><vh>editconfigform</vh></v>
<v t="2015.20140826084958.2086"><vh>editadsense</vh></v>
<v t="2015.20140826084958.2084"><vh>editadsenseform</vh></v>
<v t="2015.20140824143250.2078"><vh>parse_config</vh></v>
<v t="2014fall.20140821113240.3128"><vh>logout</vh></v>
<v t="2014fall.20140821113240.3129"><vh>taskeditform</vh></v>
<v t="2014fall.20140821113240.3130"><vh>taskedit</vh></v>
<v t="2014fall.20140821113240.3131"><vh>taskdeleteform</vh></v>
<v t="2014fall.20140821113240.3132"><vh>taskdelete</vh></v>
<v t="2014fall.20140821113240.3133"><vh>tasksearchform</vh></v>
</v>
</v>
</v>
<v t="2014spring.20140726005348.1759"><vh>@edit setup.py</vh></v>
<v t="course-mde-tw.20140417093332.2058"><vh>利用 pandoc 進行格式轉換</vh>
<v t="course-mde-tw.20140422221207.1747"><vh>注意事項</vh></v>
<v t="course-mde-tw.20140417093332.2059"><vh>@button pandoc</vh></v>
<v t="course-mde-tw.20140417093332.2060"><vh>@path wsgi/doc</vh>
<v t="course-mde-tw.20140417093332.2061"><vh>@edit title.txt</vh></v>
</v>
</v>
<v t="course-mde-tw.20140417093332.2047" a="E"><vh>分組協同報告區</vh>
<v t="course-mde-tw.20140417093332.2048"><vh>@path wsgi/doc</vh>
<v t="course-mde-tw.20140417093332.2049"><vh>@path 2ag1</vh>
<v t="course-mde-tw.20140417093332.2050"><vh>@edit doc.txt</vh></v>
</v>
<v t="course-mde-tw.20140417093332.2051"><vh>@path 2ag2</vh>
<v t="course-mde-tw.20140417093332.2052"><vh>@edit doc.txt</vh></v>
</v>
<v t="2014pythonE.20140424070658.1679"><vh>@path coursemdetw</vh>
<v t="2014pythonE.20140424070658.1680"><vh>@auto doc.txt</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="2014fall.20140821113240.3105"># -*- coding: utf-8 -*-
'''
Copyright © 2014 Chiaming Yen

Pygroup is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Pygroup is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Pygroup. If not, see &lt;http://www.gnu.org/licenses/&gt;.

***********************************************************************
'''
########################### 1. 導入所需模組
@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        'images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        'downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        'brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        'calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"},
        # 設定靜態 templates 檔案目錄對應
        '/templates':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': template_root_dir,
        'tools.staticdir.dir': 'templates',
        'tools.staticdir.index' : 'index.htm'
        }
    }

########################### 5. 在近端或遠端啟動程式
# 利用 Pygroup() class 產生案例物件
root = Pygroup()
# 導入 CMSimply 內容管理模組
#root.cmsimply = cmsimply.CMSimply()
# 使用命名節點中所定義的 cmsimply_group 類別
#root.cmsimply = cmsimply_group()
root.cmsimply = cmsimply.CMSimply()
# 導入 Download
root.cmsimply.download = cmsimply.Download()

if __name__ == '__main__':
    # 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        # 雲端執行啟動
        application = cherrypy.Application(root, config = application_conf)
    else:
        # 近端執行啟動
        '''
        cherrypy.server.socket_port = 8083
        cherrypy.server.socket_host = '127.0.0.1'
        '''
        cherrypy.quickstart(root, config = application_conf)
</t>
<t tx="2014fall.20140821113240.3106">import cherrypy
import os
### for logincheck
import smtplib
from email.mime.text import MIMEText  
from email.header import Header
### for cmsimply
import cmsimply
### 取得目前時區時間
from time import strftime, localtime
import datetime, pytz
### for pagination
import math
# for mako
from mako.template import Template
from mako.lookup import TemplateLookup
# for bs4
from bs4 import BeautifulSoup, Comment
# 計算執行時間
import time
# for mysql
import pymysql
# for skylark
#from skylark import Database, Model, Field, PrimaryKey, ForeignKey
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi
# for logincheck and parse_config methods
import hashlib
# for unescape content
import html.parser
# for logging
import logging
# for strip_tags
import re
# for sqlite
import sqlite3
# 用於 pybean 資料儲存
from pybean import Store, SQLiteWriter
# 再 try peewee
from peewee import SqliteDatabase, Model, CharField, TextField, IntegerField, MySQLDatabase

#logging.basicConfig(level=logging.DEBUG)

#logger = logging.getLogger( __name__ )

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    template_root_dir = os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static"
    # template_root_dir = _curdir + "/static"
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
    template_root_dir = _curdir + "/static"
# 資料庫選用
# 內建使用 sqlite3
ormdb = "sqlite"
#ormdb = "mysql"
#ormdb = "postgresql"
if ormdb == "sqlite":
    # 針對 sqlite3 指定資料庫檔案
    db = SqliteDatabase(data_dir+"task.db", check_same_thread=False)

elif ormdb == "mysql":
    # 選用 MySQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = MySQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_MYSQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_MYSQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_MYSQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_MYSQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = MySQLDatabase(database='yourdb', host='yourhost', \
             port=3306, user='youruser', passwd='yourpassword', charset='utf8')
else:
    # 選用 PostgreSQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = PostgreSQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_POSTGRESQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_POSTGRESQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_POSTGRESQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = PostgreSQLDatabase(database='cadp', host='localhost', \
             port=3306, user='root', passwd='root', charset='utf8')
</t>
<t tx="2014fall.20140821113240.3107"># 在此建立資料表欄位
    
class Task(Model):
    # peewee 內定 id 為 PrimaryKey
    #id = PrimaryKey()
    follow = IntegerField()
    owner = CharField()
    name = CharField()
    type = CharField()
    time = CharField()
    content = TextField()
    ip = CharField()

    class Meta:
        database = db # This model uses the data_dir+"task.db" database.
</t>
<t tx="2014fall.20140821113240.3108">########################### 3. 建立主物件
class Pygroup(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.locking' : 'early',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    'tools.caching.on' : False
    }
    
    @others
</t>
<t tx="2014fall.20140821113240.3109">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")
    # 若無字典檔案, 則從 local_目錄中複製
    #if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        #if not os.path.isfile(data_dir+"webster_vocabulary.sqlite"):
            # 尚未完成
    # 假如沒有 adsense_content 則建立一個空白檔案
    if not os.path.isfile(data_dir+"adsense_content"):
        try:
            file = open(data_dir+"adsense_content", "w", encoding="utf-8")
            #  寫入內建的 adsense_content 內容
            adsense_content = '''
&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;

&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;&lt;br /&gt;
'''
            file.write(adsense_content+"\n")
            file.close()
        except:
            print("mkdir error")
    if ormdb == "sqlite":
        # 資料庫使用 SQLite
        # 這裡應該要使用 peewee 建立資料庫與表格
        try:
            conn = sqlite3.connect(data_dir+"task.db")
            cur = conn.cursor()
            # 建立資料表
            cur.execute("CREATE TABLE IF NOT EXISTS task( \
                    id INTEGER PRIMARY KEY AUTOINCREMENT, \
                    name TEXT, \
                    owner TEXT, \
                    type TEXT, \
                    time TEXT, \
                    content TEXT, \
                    ip TEXT, \
                    follow INTEGER);")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    elif ormdb == "mysql":
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_MYSQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_MYSQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_MYSQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_MYSQL_DB_PASSWORD')])
        else:
            host="yourhost"
            port=3306
            db='yourdb'
            user='youruser'
            passwd='yourpassword'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+" CHARACTER SET UTF8;")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    else:
        # 使用 PostgreSQL
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PASSWORD')])
        else:
            host="localhost"
            port=3306
            db='cadp'
            user='root'
            passwd='root'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+";")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
</t>
<t tx="2014fall.20140821113240.3111">@cherrypy.expose
def usermenu(self):
    # 這裡包括列出用戶以及列印表單
    user = self.printuser()
    menu = ["login", "logout", "usermenu", "cmsimply", \
                 "tasklist"]
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 usermenu.html
    mytemplate = template_lookup.get_template("usermenu.html")
    return mytemplate.render(user=user, menu=menu)
</t>
<t tx="2014fall.20140821113240.3112">def printuser(self):
    # 取得 user 資料
    try:
        user = cherrypy.session["user"]
    except:
        user = "anonymous"
    if user == "":
        user = "anonymous"
    return user
</t>
<t tx="2014fall.20140821113240.3113"># 不允許使用者直接呼叫 taskform
def taskform(self, id=0, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist.html
    # 針對 id != 0 時, 表示要回應主資料緒, 希望取出與 id 對應的資料標頭, 然後加上 Re:
    mytemplate = template_lookup.get_template("taskform.html")
    return mytemplate.render(user=user, id=id)
</t>
<t tx="2014fall.20140821113240.3114">@cherrypy.expose
def taskaction(self, type=None, name=None, follow=0, content=None, ip=None, *args, **kwargs):
    if content == None or name == "":
        return "標題與內容都不可空白!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        start_time = time.time()
        owner = self.printuser()
        if self.allow_pass(owner) == "no":
            raise cherrypy.HTTPRedirect("login")
        ip = self.client_ip()
        now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
        '''
        # 因為登入後就將 @ 代換為 _at_, 所以此地不用再換
        # user 若帶有 @ 則用 at 代替
        if "@" in owner:
            owner = owner.replace('@', '_at_')
        '''
        content = content.replace('\n', '')
        valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
        tags = ''
        for tag in valid_tags:
            tags += tag
        content = self.strip_tags(content, tags)
        # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
        content = str(content).replace('&lt;/br&gt;', '')
        time_elapsed = round(time.time() - start_time, 5)
        # last insert id 為 data.id
        db.connect()
        # peewee 版本
        data = Task.create(owner=owner, name=str(name), type=type, time=str(now), follow=follow, content=content, ip=str(ip))
        data.save()
        # 這裡要與 taskedit 相同, 提供回到首頁或繼續編輯按鈕
        output = "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
    '''
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        db.close()
        return output
    # 原先直接轉到 tasklist 方法 (index)
    #raise cherrypy.HTTPRedirect("tasklist")
</t>
<t tx="2014fall.20140821113240.3115">@cherrypy.expose
# 從 tasklist 改為 index
def index(self, page=1, item_per_page=5, id=0, flat=0, desc=0, keyword=None, *args, **kwargs):
    user = self.printuser()
    # 這裡不用 self.allow_pass 原因在於需要 adsense 變數
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        if id != 0:
            raise cherrypy.HTTPRedirect("login?id="+id)
        else:
            raise cherrypy.HTTPRedirect("login")
    if adsense == "yes":
        filename = data_dir+"adsense_content"
        with open(filename, encoding="utf-8") as file:
            adsense_content = file.read()
    else:
        adsense_content = ""
    #ip = cherrypy.request.remote.ip
    ip = self.client_ip()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist2.html
    mytemplate = template_lookup.get_template("tasklist.html")
    # 這裡要加入單獨根據 id 號, 列出某一特定資料緒的分支
    # 若 id 為 0 表示非指定列出各別主緒資料, 而是列出全部資料
    # 這時可再根據各筆資料列印時找出各主緒資料的附屬資料筆數
    # 加入 flat = 1 時, 列出所有資料
    # 請注意這裡直接從 tasksearchform.html 中的關鍵字查詢, 指定以 tasklist 執行, 但是無法單獨列出具有關鍵字的 task 資料, 而是子緒有關鍵字時, 也是列出主緒資料
    # 單獨 db 連結與結束
    db.connect()
    if keyword == None:
        if id == 0:
            if flat == 0:
                # 只列出主資料緒
                # desc 為 0 表示要 id 由小到大排序列出資料
                if desc == 0:
                    method = "?"
                    data = Task.select().where(Task.follow==0)
                else:
                    # desc 為 1 表示 id 反向排序
                    method = "?desc=1"
                    data = Task.select().where(Task.follow==0).order_by(Task.id.desc())
            else:
                # flat 為 1 表示要列出所有資料
                # 原先沒有反向排序, 內建使用正向排序
                if desc == 0:
                    method = "?flat=1"
                    data = Task.select()
                else:
                    method = "?flat=1&amp;desc=1"
                    data = Task.select().order_by(Task.id.desc())
        else:
            method = "?id="+str(id)
            # 設法列出主資料與其下屬資料緒, 這裡是否可以改為 recursive 追蹤多緒資料
            # 只列出主緒與下一層子緒資料
            data = Task.select().where((Task.id == id) | (Task.follow == id))
    else:
        # 有關鍵字查詢時(只查 owner, content, type 與 name), 只列出主資料緒
        #flat = 1
        method = "?keyword="+keyword+"&amp;flat="+str(flat)
        data = Task.select().where((Task.content ** ('%%%s%%' % (keyword))) | (Task.name ** ('%%%s%%' % (keyword))) | \
        (Task.owner ** ('%%%s%%' % (keyword))) | \
        (Task.type ** ('%%%s%%' % (keyword))) \
            )
    follow = []
    for task in data:
        follow_data = Task.select().where(Task.follow == task.id).count()
        follow.append(follow_data)
    db.close()
    #
    # 送出 user, id, flat, method 與 data
    #
    # 增加傳送 read_only, 若 read_only = yes 則不列出 taskform, 而且所有新增編輯刪除功能均失效
    #
    return mytemplate.render(user=user, id=id, flat=flat, method=method, data=data,  \
        page=page, item_per_page=item_per_page, ip=ip, follow=follow, keyword=keyword, \
        adsense_content=adsense_content, adsense=adsense, anonymous=anonymous, \
        site_closed=site_closed, read_only=read_only)
    # 其餘分頁 logic 在 mako template tasklist.html 中完成
</t>
<t tx="2014fall.20140821113240.3117">def client_ip(self):
    try:
        return cherrypy.request.headers["X-Forwarded-For"]
    except:
        return cherrypy.request.headers["Remote-Addr"]
</t>
<t tx="2014fall.20140821113240.3118"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
# default can not live with calc method?
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140821113240.3119">@cherrypy.expose
def save_program(self, filename=None, sheet_content=None):
    with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
        data = sheet_content.replace("\r\n", "\n")
        out_file.write(data)

    return str(filename)+" saved!&lt;br /&gt;"
@cherrypy.expose
</t>
<t tx="2014fall.20140821113240.3127">@cherrypy.expose
def logincheck(self, id=0, account=None, password=None):
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if account != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if account == "admin":
            # 進入 admin 密碼查驗流程
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
            if hashed_password == saved_password:
                cherrypy.session['user'] = "admin"
                raise cherrypy.HTTPRedirect("/?id="+str(id))
            else:
                return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        else:
            # 一般帳號查驗
            if site_closed == "yes":
                return "抱歉!網站關閉中"
            elif not mail_suffix in account or mail_suffix != "":
                return "抱歉!此類帳號不允許登入"
            else:
                server = smtplib.SMTP('smtp.gmail.com:587')
                server.ehlo()
                server.starttls()
                try:
                    server.login(account, password)
                    server.quit()
                    if "@" in account:
                        account = account.replace('@', '_at_')
                    cherrypy.session["user"] = account
                    #return account+" login successfully."
                    #若登入成功, 則離開前跳到根目錄
                except:
                    server.quit()
                    return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        raise cherrypy.HTTPRedirect("login?id="+str(id))
    raise cherrypy.HTTPRedirect("/?id="+str(id))
</t>
<t tx="2014fall.20140821113240.3128">@cherrypy.expose
def logout(self, *args, **kwargs):
    cherrypy.session.delete()
    return "已經登出!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    #raise cherrypy.HTTPRedirect("")
</t>
<t tx="2014fall.20140821113240.3129">@cherrypy.expose
def taskeditform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            db.connect()
            # 用 get() 取單筆資料
            data = Task.select().where(Task.id==int(id)).get()
            output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! Not authorized!"
                else:
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskeditform.html")
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data)
            else:
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskeditform.html")
                db.close()
                return mytemplate.render(user=user, id=id, data=data)
        except:
            db.close()
            return "error! Not authorized!"
</t>
<t tx="2014fall.20140821113240.3130">@cherrypy.expose
def taskedit(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    if id == None:
        return "error&lt;br /&gt;&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    try:
        db.connect()
    except:
        time.sleep(0.300)
        db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    # 過濾資料
    content = content.replace('\n', '')
    valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
    tags = ''
    for tag in valid_tags:
        tags += tag
    content = self.strip_tags(content, tags)
    # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
    content = str(content).replace('&lt;/br&gt;', '')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if  user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 請注意這裡曾經犯了 where(id==int(id) 的重大錯誤, 讓所有資料在 update 時只留下一筆資料
            query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
            query.execute()
            output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
            output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
            owner:'''+data.owner+'''&lt;br /&gt;
            name:'''+name+'''&lt;br /&gt;
            type:'''+type+'''&lt;br /&gt;
            time:'''+str(now)+'''&lt;br /&gt;
            content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    else:
        query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
        query.execute()
        output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+data.owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    db.close()
    return output
</t>
<t tx="2014fall.20140821113240.3131">@cherrypy.expose
def taskdeleteform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            # 這裡要區分刪除子緒或主緒資料
            # 若刪除子緒, 則 data 只包含子緒資料, 若為主緒, 則 data 必須包含所有資料
            # 先找出資料, 判定是否為主緒
            # 用 get() 取單筆資料
            db.connect()
            data= Task.select().where(Task.id==int(id)).get()
            owner = data.owner
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! 非資料擁有者, Not authorized!"
                else:
                    if data.follow == 0:
                        # 表示該資料為主緒資料
                        # 資料要重新搜尋, 納入子資料
                        data = Task.select().where((Task.id == id) | (Task.follow == id))
                        output = "資料為主緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, main 表資料為主緒
                        type = "main"
                    else:
                        # 表示該資料為子緒資料
                        # 直接採用 data 資料送到 taskdeleteform.html
                        output = "資料為子緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, alone 表資料為子緒
                        type = "alone"
                    output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskdeleteform.html")
                    # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data, type=type)
            else:
                if data.follow == 0:
                    # 表示該資料為主緒資料
                    # 資料要重新搜尋, 納入子資料
                    data = Task.select().where((Task.id == id) | (Task.follow == id))
                    output = "資料為主緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, main 表資料為主緒
                    type = "main"
                else:
                    # 表示該資料為子緒資料
                    # 直接採用 data 資料送到 taskdeleteform.html
                    output = "資料為子緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, alone 表資料為子緒
                    type = "alone"
                output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskdeleteform.html")
                # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                db.close()
                return mytemplate.render(user=user, id=id, data=data, type=type)
        except:
            db.close()
            return "error! 無法正確查詢資料, Not authorized!"
</t>
<t tx="2014fall.20140821113240.3132">@cherrypy.expose
def taskdelete(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    # 用 get() 取單筆資料
    db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
            if data.follow == 0:
                # 表示資料為主緒
                # 先刪除主緒
                query = Task.at(int(id)).delete()
                query.execute()
                # 再刪除所有對應子緒
                query = Task.delete().where(follow=int(id))
                query.execute()
                output += "所有序列資料已經刪除!&lt;br /&gt;"
            else:
                # 表示資料為子緒
                query = Task.delete().where(Task.id==int(id))
                query.execute()
                output += "資料已經刪除!&lt;br /&gt;"
    else:
        # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
        if data.follow == 0:
            # 表示資料為主緒
            # 先刪除主緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            # 再刪除所有對應子緒
            query = Task.delete().where(Task.follow==int(id))
            query.execute()
            output += '''所有序列資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        else:
            # 表示資料為子緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            output += '''資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
    db.close()
    return output
</t>
<t tx="2014fall.20140821113240.3133"># 不允許使用者直接呼叫 tasksearchform
def tasksearchform(self, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasksearchform.html
    mytemplate = template_lookup.get_template("tasksearchform.html")
    return mytemplate.render(user=user)
</t>
<t tx="2014fall.20140821113240.3137">########################### 1. 導入啟動 cherrypy, 所在目錄, 物件所需模組
@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="2014fall.20140821113240.3138">import cherrypy
import os
import cmsimply
import pygroup
# for createdb 
import pymysql
# for webster and wordnet
import wordnet
import webster

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    template_root_dir = os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static"
    # template_root_dir = _curdir + "/static"
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
    template_root_dir = _curdir + "/static"

########################### 3. 設定根目錄與子目錄啟動
# 利用 CDProject() class 產生案例物件
#root = CDProject()
# 希望從物件案例建立時, 指定資料庫與資料表的建立流程
# 例如 root = pygroup.Pygroup(資料庫, 資料表, 其他參數)
root = pygroup.Pygroup()
# 導入 CMSimply 內容管理模組
#root.cmsimply = cmsimply.CMSimply()
# 使用命名節點中所定義的 cmsimply_group 類別
#root.cmsimply = cmsimply_group()
root.c = cmsimply.CMSimply()
# 導入 Download
root.c.download = cmsimply.Download()
# 從 wordnet 與 webster 模組建立應用案例
root.wordnet = wordnet.MyCheck()
root.webster = webster.MyCheck()

########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"},
        # 設定靜態 templates 檔案目錄對應
        '/templates':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': template_root_dir,
        'tools.staticdir.dir': 'templates',
        'tools.staticdir.index' : 'index.htm'
        }
    }

########################### 5. 在近端或遠端啟動程式
# 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 雲端執行啟動
    application = cherrypy.Application(root, config = application_conf)
else:
    # 近端執行啟動
    '''
    cherrypy.server.socket_port = 8443
    cherrypy.server.socket_host = 'your_ip'
    cherrypy.server.ssl_certificate = 'new_pygroup/wsgi/ssl_cert.pem'
    cherrypy.server.ssl_private_key = 'new_pygroup/wsgi/ssl_cert.pem'
    cherrypy.config.update({'engine.autoreload.on':False,
                        'log.access_file': data_dir+'/downloads/access.log',
                        'log.error_file': data_dir+'/downloads/error.log'})
    '''
    # 避開 winreg 模組無法找到的問題"
    # Ubuntu 14.04, Python 3.4.0, CherryPy 3.5.0
    cherrypy.config.update({'engine.autoreload_on':False})
    # 若在近端以 Python 直接執行, 則使用下一行啟動
    cherrypy.quickstart(root, config = application_conf)
    # 若在近端使用 uwsgi 啟動則與 OpenShift 平台上的啟動方式相同
    #application = cherrypy.Application(root, config = application_conf)
</t>
<t tx="2014fall.20140821113240.3139">https://pypi.python.org/pypi/skylark/0.9.0

https://github.com/hit9/skylark

http://skylark.readthedocs.org/en/latest/</t>
<t tx="2014fall.20140821113240.3140">管理者帳號

一般用戶帳號

    利用 smtplib 與 Gmail 伺服器, 驗證使用者的帳號密碼</t>
<t tx="2014fall.20140821113240.3141"></t>
<t tx="2014fall.20140821113240.3142">CREATE TABLE `sforum` (
  `id` INTEGER PRIMARY KEY,
  `wid`,
  `for_ptitle`,
  `for_text` ,
  `for_mail` ,
  `for_data`,
  `for_dataw`,
  `for_ip`,
  `for_name`
, "uploadfile")

CREATE TABLE `uploadfile` (
  `serial` INTEGER PRIMARY KEY,
  `tablename`,
  `follow`,
  `version` ,
  `fileorder` ,
  `filename`,
  `filesize`
)</t>
<t tx="2014fall.20140821113240.3143">MySQL:

CREATE TABLE `task` (
	`id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci',
	`owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci',
	`type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci',
	`time` DATETIME NOT NULL,
	`content` LONGTEXT NULL COLLATE 'utf8_unicode_ci',
	`ip` VARCHAR(64) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci',
	`follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0',
	PRIMARY KEY (`id`)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

SQLite:

CREATE TABLE task(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            owner TEXT,
            type TEXT,
            time TEXT,
            content TEXT,
            ip TEXT,
            follow INTEGER)
</t>
<t tx="2014fall.20140821113240.3144">http://skylark.readthedocs.org/en/latest/cases.html#pagination</t>
<t tx="2014fall.20140821113240.3145">http://www.heidisql.com/</t>
<t tx="2014fall.20140821113240.3146">功能討論

http://cadp-cmsimplydemo.rhcloud.com/tasklist?id=59</t>
<t tx="2014fall.20140821113240.3147">假如在 OpenShift 上要使用 Adsense, 唯一的方法是採用客製化符號名稱

原因是 rhcloud.com 用戶眾多, 只要一個網站違反 Google 規定, 整個網域都無法使用 Adsense</t>
<t tx="2014fall.20140826101705.4466">配置到 http://2014fall-2013fall.rhcloud.com/

步驟:

建立 github 程式碼專案

利用 github 程式碼網址, 新增 Python 3.3 OpenShift 應用程式

在應用程式下新增 MySQL 5.5 Cartridge

在近端專案新增 OpenShift 部署訊息後, 同步推向 github 與 OpenShift

將 OpenShift 網址, 以別名替代後, 才能顯示 Adsense 廣告</t>
<t tx="2014fall.20140826101705.4467">Brython 近端 import random 會有問題

遠端則沒有問題</t>
<t tx="2014pythonE.20140422152422.1669">配合 2014cda 專案

2014cdaproject@gmail.com

正好可以有三個  Python 3.3 應用程式, 用於 

2014cda, 2014cdb, 2014c2 等三個專案使用</t>
<t tx="2014pythonE.20140422152422.1670">puttygen.exe 導入 private key 後, 以 Conversions-&gt;Export OpenSSH key

將資料存入 V:\home\.ssh\id_rsa 檔案中

當使用者利用  git clone OpenShift 平台上專案時, Git 將會利用 id_rsa 私鑰與 OpenShift settings 設定所儲存的 public key 進行配對, 若通過驗證才能更新或擷取 OpenShift 平台上的程式碼.

在 Ubuntu 中要使用 Filezilla 登入 OpenShift 資料倉儲, 使用:

ssh-add ~/.ssh/id_rsa</t>
<t tx="2014pythonE.20140422152422.1671">course-mde-tw on Github 使用 coursemdetw@gmail.com 登記

couorsemdetw on Github 使用 course@mde.tw 登記

2014cda, 2014cdb, 2014c2 Github 專案登記在 coursemdetw 名下

course-mde-tw 為協同人員

</t>
<t tx="2014pythonE.20140424070658.1679"></t>
<t tx="2014spring.20140723175454.2635">是的, 我們想要開發一個雲端群組軟體套件, 名稱為 pygroup

這個版本內定使用 SQLite 資料庫

基本功能:

1. 讓 gmail 帳號可以登入本系統, 主要目的在讓學員可以自行管理 gmail 帳號密碼.

2. 本系統有一總管理員及 CMSimply 內容管理系統, 主要功能在審查學員是否可以登入本系統, 修改相關資料, 系統功能與導引則透過內容管理系統維護

3. 學員允許登入後, 可維護個人網頁, 可在被允許的模組下工作（依據被編入的分組(選課班級))

4. 各課程按照學員座號, 可以進入學員首頁, 並且查詢學員所增加的相關資料

5. 系統只接受文字與連結資料, 其他圖片, 影音, 文件檔案, 一律各自存放在 copy.com 與 Vimeo.</t>
<t tx="2014spring.20140803093407.1974"></t>
<t tx="2014spring.20140803093407.1975"></t>
<t tx="2014spring.20140803093407.1976"></t>
<t tx="2015.20140824143250.2077">tasklist 直接當成 index

配置管理者登入模式

pygroup_config

設定是否放置 Adsense 廣告與內容
設定是否允許 anonymous 新增或瀏覽內容
新增最上方使用者 menu bar 設計

線上管理各設定內容</t>
<t tx="2015.20140824143250.2078">def parse_config(self, filename):
    #filename = "pygroup_config"
    if not os.path.isfile(data_dir+filename):
        # create config file if there is no config file
        file = open(data_dir+filename, "w", encoding="utf-8")
        # 若無設定檔案, 則逐一寫入 default 值
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # adsense 為 yes 表示要放廣告, 內建 adsense 為 no
        # anonymouse 為 yes 表示允許無登入者可以檢視內容, 內建 anonymous 為 no
        file.write("password:"+hashed_password+"\n \
            adsense:no\n \
            anonymous:no\n \
            user_mail_suffix:\n \
            site_closed:no\n \
            read_only:no\n")
        file.close()
    # 取出設定值後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        config = file.read()
    config_data = config.split("\n")
    password = config_data[0].split(":")[1]
    adsense = config_data[1].split(":")[1]
    anonymous = config_data[2].split(":")[1]
    mail_suffix = config_data[3].split(":")[1]
    site_closed = config_data[4].split(":")[1]
    read_only = config_data[5].split(":")[1]
    return password, adsense, anonymous, mail_suffix, site_closed, read_only
</t>
<t tx="2015.20140824143250.2080">def allow_pass(self, user="anonymous"):
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        return "no"
    else:
        return "yes"
</t>
<t tx="2015.20140825203447.2080">@cherrypy.expose
def editconfigform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 config 編輯表單
    # 取出目前的設定值
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editconfigform.html")
    return mytemplate.render(user=user, saved_password=saved_password, adsense=adsense, anonymous=anonymous, mail_suffix=mail_suffix, site_closed=site_closed, read_only=read_only)
</t>
<t tx="2015.20140825203447.2081">@cherrypy.expose
def editconfig(self, password=None, password2=None, adsense=None, anonymous=None, \
                mail_suffix=None, site_closed=None, read_only=None):
    filename = "pygroup_config"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    if password == None or adsense == None or anonymous == None:
        return self.error_log("no content to save!")
    # 取出目前的設定值
    old_password, old_adsense, old_anonymous, old_mail_suffix, old_site_closed, old_read_only = self.parse_config(filename=filename)
    if adsense == None or password == None or password2 != old_password or password == '':
        # 傳回錯誤畫面
        return "error&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # 將新的設定值寫入檔案
        file = open(data_dir+filename, "w", encoding="utf-8")
        #  將新的設定值逐一寫入設定檔案中
        file.write("password:"+hashed_password+"\n \
            adsense:"+adsense+"\n \
            anonymous:"+anonymous+"\n \
            mail_suffix:"+mail_suffix+"\n \
            site_closed:"+site_closed+"\n \
            read_only:"+read_only+"\n")
        file.close()
        # 傳回設定檔案已經儲存
        return "config file saved&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
</t>
<t tx="2015.20140826084958.2084">@cherrypy.expose
def editadsenseform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 adsense_content 檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 adsense_content 編輯表單
    # 取出目前的設定值
    filename="adsense_content"
    # 取出 adsense_content 後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        saved_adsense = file.read()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editadsenseform.html")
    return mytemplate.render(user=user, saved_adsense=saved_adsense)
</t>
<t tx="2015.20140826084958.2086">@cherrypy.expose
def editadsense(self, adsense_content=None):
    filename = "adsense_content"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 將新的設定值寫入檔案
    file = open(data_dir+filename, "w", encoding="utf-8")
    #  將新的設定值逐一寫入設定檔案中
    file.write(adsense_content+"\n")
    file.close()
    # 傳回設定檔案已經儲存
    return "adsense_content file saved"
</t>
<t tx="2015.20140826151106.2090">password:encrypted password
adsense:no/yes
anonymous:no/yes
user_mail_suffix:gm.nfu.edu.tw (功能尚未置入)
site_closed:no/yes

admin 管理者密碼
adsense 廣告是否要刊登
anonymous 用戶是否可以進入

增加可以登入的 Gmail 帳號尾碼
增加是否關閉網站設定功能

增加管理者可以 edit/delete 任何資料</t>
<t tx="2015.20140828002231.2093">同步到 2014fall-2013fall</t>
<t tx="2015.20140829105017.2095">增加一個 readonly 設定選項

管理者密碼: 
adsense: yes/no
anonymous: yse/no
mail_suffix:
site_closed: yes/no
read_only: yes/no</t>
<t tx="2015.20140829105017.2096">@cherrypy.expose
# 登入表單, 使用 gmail 帳號與密碼登入
def login(self, id=0, *args, **kwargs):
    # 當使用者要求登入時, 將 user session 清除
    #cherrypy.session["user"] = ""
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("login.html")
    return mytemplate.render(site_closed=site_closed, read_only=read_only, id=id)</t>
<t tx="2015.20140830081045.4015">## Remove xml style tags from an input string.
#
#  @param string The input string.
#  @param allowed_tags A string to specify tags which should not be removed.
def strip_tags(self, string, allowed_tags=''):
  if allowed_tags != '':
    # Get a list of all allowed tag names.
    allowed_tags_list = re.sub(r'[\\/&lt;&gt; ]+', '', allowed_tags).split(',')
    allowed_pattern = ''
    for s in allowed_tags_list:
      if s == '':
       continue;
      # Add all possible patterns for this tag to the regex.
      if allowed_pattern != '':
        allowed_pattern += '|'
      allowed_pattern += '&lt;' + s + ' [^&gt;&lt;]*&gt;$|&lt;' + s + '&gt;|&lt;!--' + s + '--&gt;'
    # Get all tags included in the string.
    all_tags = re.findall(r'&lt;!--?[^--&gt;&lt;]+&gt;', string, re.I)
    for tag in all_tags:
      # If not allowed, replace it.
      if not re.match(allowed_pattern, tag, re.I):
        string = string.replace(tag, '')
  else:
    # If no allowed tags, remove all.
    string = re.sub(r'&lt;[^&gt;]*?&gt;', '', string)
 
  return string
</t>
<t tx="2015.20140901003454.2095">若登入有用戶想要連結的 ip, 則登入後直接轉到該 ip 對應資料</t>
<t tx="2015.20140902161836.5388">原先考慮要利用 shutil 複製檔案用

import os
import shutil
sourcePath = r'D:\some\path'
destPath = r'D:\some\other\path'
for root, dirs, files in os.walk(sourcePath):

    #figure out where we're going
    dest = destPath + root.replace(sourcePath, '')
    
    #if we're in a directory that doesn't exist in the destination folder
    #then create a new folder
    if not os.path.isdir(dest):
        os.mkdir(dest)
        print('Directory created at: ' + dest)

    #loop through all files in the directory
    for f in files:

        #compute current (old) &amp; new file locations
        oldLoc = root + '\\' + f
        newLoc = dest + '\\' + f

        if not os.path.isfile(newLoc):
            try:
                shutil.copy2(oldLoc, newLoc)
                print('File ' + f + ' copied.')
            except IOError:
                print('file "' + f + '" already exists')</t>
<t tx="2015.20140916184224.2608">先前已經完成 skylark ORM 版本

目前改用 peewee ORM, 已經測試 SQLite 與 MySQL, 準備加入近端與雲端上的 PostgreSQL</t>
<t tx="2015.20140917185942.2149">OPENSHIFT_POSTGRESQL_DB_PASSWORD
OPENSHIFT_POSTGRESQL_DB_HOST
OPENSHIFT_POSTGRESQL_DB_GEAR_DNS
OPENSHIFT_POSTGRESQL_DB_USERNAME
OPENSHIFT_POSTGRESQL_DB_GEAR_UUID
OPENSHIFT_POSTGRESQL_DB_URL
OPENSHIFT_POSTGRESQL_VERSION
OPENSHIFT_POSTGRESQL_DB_PORT</t>
<t tx="amd.20150517161425.1">2015.05.17

 OpenShift 上為 http://pygroup-kmolmdetw.rhcloud.com
 以 kmolmdetw@gmail.com 登記
 </t>
<t tx="amd.20150517161644.1">並且以 http://pygroup-kmolmdetw.rhcloud.com 同步執行

在近端執行時:

# 避開 winreg 模組無法找到的問題"
# Ubuntu 14.04, Python 3.4.0, CherryPy 3.5.0
cherrypy.config.update({'engine.autoreload_on':False})
# 若在近端以 Python 直接執行, 則使用下一行啟動
cherrypy.quickstart(root, config = application_conf)

將 login.html 中的近端 SSL 跳轉 Javascript 蓋掉
</t>
<t tx="amd.20151026211307.1">利用 http://peterhudec.github.io/authomatic/ 導入 oauth2

改為 Flask 之後, 就會很容易導入 authomatic 與 github3.py

可以利用 oauth2 協定讓使用者登入, 也能夠透過 github3.py 控管協同 Github 倉儲</t>
<t tx="amd.20151026211514.1"></t>
<t tx="amd.20151026211800.1">@cherrypy.expose
def logincheck2(self, id=0, account=None, password=None):
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if account != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if account == "admin":
            # 進入 admin 密碼查驗流程
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
            if hashed_password == saved_password:
                cherrypy.session['user'] = "admin"
                raise cherrypy.HTTPRedirect("/?id="+str(id))
            else:
                return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        else:
            # 一般帳號查驗
            if site_closed == "yes":
                return "抱歉!網站關閉中"
            elif not mail_suffix in account or mail_suffix != "":
                return "抱歉!此類帳號不允許登入"
            else:
                server = smtplib.SMTP('smtp.gmail.com:587')
                server.ehlo()
                server.starttls()
                try:
                    server.login(account, password)
                    server.quit()
                    if "@" in account:
                        account = account.replace('@', '_at_')
                    cherrypy.session["user"] = account
                    #return account+" login successfully."
                    #若登入成功, 則離開前跳到根目錄
                except:
                    server.quit()
                    return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        raise cherrypy.HTTPRedirect("login?id="+str(id))
    raise cherrypy.HTTPRedirect("/?id="+str(id))
</t>
<t tx="amd.20151026211831.1">@cherrypy.expose
# 登入表單, 使用 gmail 帳號與密碼登入
def login2(self, id=0, *args, **kwargs):
    # 當使用者要求登入時, 將 user session 清除
    #cherrypy.session["user"] = ""
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("login.html")
    return mytemplate.render(site_closed=site_closed, read_only=read_only, id=id)</t>
<t tx="amd.20160719104503.1">準備將 PyGroup 改為 Flask based 名稱就叫作 PyGrouf</t>
<t tx="amd.20160719104851.1"></t>
<t tx="amd.20160719104919.1">開始進行 Flask 網際框架的導入

將 CherryPy 換為 Flask 的方法為:

1. 仍然保留 wsgi 目錄下 CherryPy 程式版本的運作, 可以在程式開發過程中提供比較參考

2. Flask 的程式啟動以 wsgi.py 程式為主, 導入 flaskapp.py, 隨後則可以將附屬功能以 blueprint 的方式置入

首先要採用 wcmw14 的 Google 帳號登入架構, 取得使用者的 Gmail 帳號資料後, 利用  Javascript 登入 Gmail, 然後進入 PyGrouf</t>
<t tx="amd.20160719105219.1"></t>
<t tx="amd.20160719105348.1">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    app.run()






</t>
<t tx="amd.20160719105410.1"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, \
    render_template, session, make_response, url_for, flash
import random
import math
import os
# init.py 為自行建立的起始物件
import init
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic
# from config.py 導入 CONFIG
from config import CONFIG
# 利用 nocache.py 建立 @nocache decorator, 讓頁面不會留下 cache
from nocache import nocache
### from PyGroup start
import cherrypy
import os
### for logincheck
import smtplib
from email.mime.text import MIMEText  
from email.header import Header
### for cmsimfly
import cmsimfly
### 取得目前時區時間
from time import strftime, localtime
import datetime, pytz
### for pagination
import math
# for mako
from mako.template import Template
from mako.lookup import TemplateLookup
# for bs4
from bs4 import BeautifulSoup, Comment
# 計算執行時間
import time
# for mysql
import pymysql
# for skylark
#from skylark import Database, Model, Field, PrimaryKey, ForeignKey
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi
# for logincheck and parse_config methods
import hashlib
# for unescape content
import html.parser
# for logging
import logging
# for strip_tags
import re
# for sqlite
import sqlite3
# 用於 pybean 資料儲存
from pybean import Store, SQLiteWriter
# 再 try peewee
from peewee import SqliteDatabase, Model, CharField, TextField, IntegerField, MySQLDatabase
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    template_root_dir = os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static"
    # template_root_dir = _curdir + "/static"
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
    template_root_dir = _curdir + "/static"
# 資料庫選用
# 內建使用 sqlite3
ormdb = "sqlite"
#ormdb = "mysql"
#ormdb = "postgresql"
if ormdb == "sqlite":
    # 針對 sqlite3 指定資料庫檔案
    db = SqliteDatabase(data_dir+"task.db", check_same_thread=False)

elif ormdb == "mysql":
    # 選用 MySQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = MySQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_MYSQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_MYSQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_MYSQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_MYSQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = MySQLDatabase(database='yourdb', host='yourhost', \
             port=3306, user='youruser', passwd='yourpassword', charset='utf8')
else:
    # 選用 PostgreSQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = PostgreSQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_POSTGRESQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_POSTGRESQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_POSTGRESQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = PostgreSQLDatabase(database='cadp', host='localhost', \
             port=3306, user='root', passwd='root', charset='utf8')
### from PyGroup end
# 導入 pygroup.py
import pygroup

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
    CALLBACK_URL = "http://cdw2-ladisai.rhcloud.com/menu"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"
    CALLBACK_URL = "http://localhost:5000/menu"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)

# 設置隨後要在 blueprint 應用程式中引用的 global 變數
app.config['data_dir'] = data_dir
app.config['static_dir'] = static_dir
app.config['download_dir'] = download_dir

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

# blueprint 註冊區
app.register_blueprint(pygroup.pygroup_app)</t>
<t tx="amd.20160719105410.10">@app.route('/fileuploadform')
def fileuploadform():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    return "&lt;h1&gt;file upload&lt;/h1&gt;&lt;a href='menu'&gt;menu&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'downloads/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="amd.20160719105410.11">@app.route('/imageaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def imageaxupload():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"images/"+filename, "wb")
    else:
        file = open(data_dir+"images/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "image file uploaded!"

    
    
</t>
<t tx="amd.20160719105410.12">@app.route('/imageuploadform')
def imageuploadform():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    return "&lt;h1&gt;file upload&lt;/h1&gt;&lt;a href='menu'&gt;menu&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'images/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="amd.20160719105410.13">@app.route('/downloads/&lt;path:filename&gt;', methods=['GET', 'POST'])
def download(filename):
    #return send_from_directory(download_dir, filename=filename, as_attachment=True)
    return send_from_directory(download_dir, filename=filename)
    


</t>
<t tx="amd.20160719105410.14"># setup static directory
@app.route('/images/&lt;path:path&gt;')
def send_images(path):
    return send_from_directory(data_dir+"/images/", path)
</t>
<t tx="amd.20160719105410.15"># setup static directory
@app.route('/static/')
def send_static():
  return app.send_static_file('index.html')

</t>
<t tx="amd.20160719105410.16"># setup static directory
@app.route('/static/blog/')
def send_blog():
  return app.send_static_file('blog/index.html')

</t>
<t tx="amd.20160719105410.17"># setup static directory
@app.route('/static/&lt;path:path&gt;')
def send_file(path):
  return app.send_static_file(static_dir+path)

</t>
<t tx="amd.20160719105410.18">@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
@app.route('/login', methods=['GET', 'POST'], defaults={'provider_name':'google'})
def login(provider_name):
    
    callbackurl = CALLBACK_URL
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
            
        # 利用 session 登記登入者的 email
        session['login_email'] = result.user.email
        
        # 這裡必須分近端與雲端, 因為 google logout redirect 的 url 不同
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            # 表示程式在雲端執行
            local = False
        else:
            # 表示在近端執行
            local = True
        # The rest happens inside the template.
        return render_template('login.html', result=result, local=local, callbackurl=callbackurl)
    
    # Don't forget to return the response.
    return response
</t>
<t tx="amd.20160719105410.19">@app.route('/logout')
def logout():
    session.pop('login_email' , None)
    flash('已經登出!')
    #return redirect(url_for('menu'))
    return redirect(url_for('login'))
</t>
<t tx="amd.20160719105410.2">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)
</t>
<t tx="amd.20160719105410.20">@app.route('/menu')
@app.route('/index')
@nocache
def menu():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 進入使用者已經登入的流程設計
    user = session.get('login_email')
    return render_template('menu.html', user=user)
</t>
<t tx="amd.20160719105410.21">@app.route('/alogin' , methods=['GET' , 'POST'])
def alogin():
    # 在 OpenShift 執行要啟動 SSL 跳轉
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
        openshift = True
    else:
        openshift = False
    
    return render_template('alogin.html', openshift=openshift)
</t>
<t tx="amd.20160719105410.22">@app.route('/alogin_check' , methods=['GET' , 'POST'])
def alogin_check():
    spassword = "secret"
    username = request.form["username"]
    password = request.form["password"]
    if username != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if username == "admin":
            # 進入 admin 密碼查驗流程
            if password == spassword:
                # 利用 session 登記登入者的 email
                session['login_email'] = "admin"
                return redirect(url_for('menu'))
            else:
                return redirect(url_for('login'))
    return redirect(url_for('login'))
</t>
<t tx="amd.20160719105410.3">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)
</t>
<t tx="amd.20160719105410.4">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")
</t>
<t tx="amd.20160719105410.5">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)
</t>
<t tx="amd.20160719105410.6">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 
</t>
<t tx="amd.20160719105410.7">@app.route('/option', methods=["GET", "POST"])
def option():
    # 各組選出組長的方式, 若採遞增, 則各組內學號最小者為組長
    option_list1 = ["遞增", "遞減"]
    # 各組組長間的排序定組序, 若採遞增, 則學號最小的組長為第1組
    option_list2 = ["遞增", "遞減"]
    # 電腦教室共有 9 排電腦
    column = 9
    # 加上班級選擇
    option_list3 = ["2a", "2b"]
    # 根據班級的總人數, 以 9 去除, 算出需要排幾列才能夠容納的下, 而且若列數超過 7
    # 表示這些學員必須與其他同組學員共用電腦

    return render_template('option.html', option_list1=option_list1, option_list2=option_list2, option_list3=option_list3, column=column)
</t>
<t tx="amd.20160719105410.8">@app.route('/optionaction', methods=['POST'])
def optionaction():
    # 最後傳回的字串為 out_string
    out_string = ""
    # 程式內需要暫時使用的 tmp_string
    tmp_string = ""
    # 傳回字串中, 用來說明排序原則的 desc_string
    desc_string = ""
    result = []
    group_sorted = []
    num_of_stud = 0
    # 每組至多 7 人
    max_num_in_one_group = 7
    # 電腦教室配置, 共有 9 排
    total_column = 9
    # 上面為相關變數的初始值設定, 以下開始取出 data_a 或 data_b 進行處理, 由 option3 傳回值決定
    if request.form["option3"]  == "2a":
        content = request.form["data_a"]
    else:
        content = request.form["data_b"]
    #result = content.splitlines()
    for line in content.splitlines():
        result.append(list(line.split(",")))
    # i 為行序
    for i in range(len(result)):
        # j 為組員序
        for j in range(len(result[i])):
            tmp_string += result[i][j] + ", "
        out_string += "第" + str(i+1) + "排資料:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    for i in range(len(result)):
        # 開始進入組內排序, 根據 request.form["option1"]  的值決定遞增或遞減
        if request.form["option1"]  == "遞增":
            group_list = sorted(list(filter(None, result[i])))
        else:
            group_list = sorted(list(filter(None, result[i])), reverse=True)
        group_sorted.append(group_list)
    if request.form["option1"]  == "遞增":
        desc_string += "組內學號最小者為組長."
    else:
         desc_string += "組內學號最大者為組長."
    # 開始進入組間組長學號排序, 根據 request.form["option2"] 的值決定遞增或遞減
    if request.form["option2"]  == "遞增":
        desc_string += "各組長中學號最小者為第1組."
        final_result = sorted(group_sorted)
    else:
        desc_string += "各組長中學號最大者為第1組."
        final_result = sorted(group_sorted, reverse=True)
    out_string += "&lt;br /&gt;" + desc_string + "&lt;br /&gt;"
    # i 為行序
    for i in range(len(final_result)):
        # j 為組員序
        for j in range(len(final_result[i])):
            num_of_stud += 1
            tmp_string += final_result[i][j] + ","
        out_string += "第" + str(i+1) + "組:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    #return "總共有" + str(i+) + "組"
    # group_num 為總組數
    group_num = i + 1
    # 截至這裡, 已經完成選組長, 以及定組序的工作 ,接下來要排座位, 並且印出座位表
    # 先算每班的總人數
    #return "總共有"+ str(num_of_stud) + "人"
    seat_by_column = []
    for row in range(max_num_in_one_group):
    # 每組最多 7 人
    #for row in range(7):
        # 這裡的 11 為總組數
        #for column in range(11):
        for column in range(group_num):
            # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
            try:
                seat_by_column.append(final_result[column][row])
            except:
                seat_by_column.append("")
    # seat_by_column 為去除空白字串前的座位數列
    # 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序
    seat_by_column = list(filter(None, seat_by_column))
    # 然後每 N 個取為 1 排, 即可得到以排為主的座位序列, 而 N 則視全班人數除以 9, 也就是 total_column 進位決定, 因為共有 9 排
    N = math.ceil(num_of_stud/total_column)
    # for debug
    #return str(num_of_stud) + ":" + str(total_column) + ":" + str(N)
    column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
    # 列出每 N 個組員一排的數列 column_list
    # 接下來要納入以排為主的座位
    # 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
    seat_dict = {}
    for column in range(len(column_list)):
        for i in range(N):
            try:
                seat_dict.update({column_list[column][i]: (column, i)})
            except:
                seat_dict.update({"": ""})
                
    # 開始準備用順序列出學員座號
    # 根據學號, 排序 dictionary 的方法
    import operator
    seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)
    # 依照學號順序, 列出座位表
    out_string += "&lt;br /&gt;按照學號次序列出座位表:&lt;br /&gt;&lt;br /&gt;"
    for i in range(1, len(seat_dict_sort)):
        out_string +=  str(i) + ":"+ str(seat_dict_sort[i]) + "&lt;br /&gt;"
    # 結束準備用順序列出學員座號
    # dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
    #g.es(column_list[::-1])

    # 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列, 也就是 N 的值) 列數補上空白字串 (也就是空位)
    # 所以不能使用 zip, 而必須導入 zip_longest 模組方法
    from itertools import zip_longest
    final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
    # 列出最後的座位表
    #g.es(final_seat)
    # 最後轉成 html table 標註格式
    out_string += "&lt;br /&gt; &lt;br /&gt;"
    out_string += "&lt;table border='1' width='100%'&gt;"
    out_string += "&lt;tr&gt;&lt;td colspan='9' style='text-align:center'&gt;講台&lt;/td&gt;&lt;/tr&gt;"
    for row in range(len(final_seat)):
        out_string += "&lt;tr&gt;"
        # 因為每一 row 有 9, 也就是 total_column 個位子
        for i in range(total_column):
            try:
                if i%2 != 0:
                    out_string += "&lt;td style='text-align:center'  bgcolor='#FFD78C' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
                else:
                    out_string += "&lt;td style='text-align:center' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
            except:
                out_string += "&lt;td&gt;&amp;nbsp;&lt;/td&gt;"
        out_string += "&lt;/tr&gt;"
    out_string += "&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"
    return out_string
    # 等運算或資料處理結束後, 再將相關值送到對應的 template 進行資料的展示
    #return render_template('optionaction.html', option_list1=option_list1, option_list2=option_list2)
    

</t>
<t tx="amd.20160719105410.9">@app.route('/fileaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def fileaxupload():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"downloads/"+filename, "wb")
    else:
        file = open(data_dir+"downloads/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "files uploaded!"

    
    
</t>
<t tx="amd.20160719110153.1"></t>
<t tx="amd.20160719125653.1"># 在此建立資料表欄位
    
class Task(Model):
    # peewee 內定 id 為 PrimaryKey
    #id = PrimaryKey()
    follow = IntegerField()
    owner = CharField()
    name = CharField()
    type = CharField()
    time = CharField()
    content = TextField()
    ip = CharField()

    class Meta:
        database = db # This model uses the data_dir+"task.db" database.
</t>
<t tx="amd.20160719125734.1">########################### 3. 建立主物件
class Pygroup(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.locking' : 'early',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    'tools.caching.on' : False
    }
    
    @others
</t>
<t tx="amd.20160719125734.10">def client_ip(self):
    try:
        return cherrypy.request.headers["X-Forwarded-For"]
    except:
        return cherrypy.request.headers["Remote-Addr"]
</t>
<t tx="amd.20160719125734.11"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
# default can not live with calc method?
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="amd.20160719125734.12">@cherrypy.expose
def save_program(self, filename=None, sheet_content=None):
    with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
        data = sheet_content.replace("\r\n", "\n")
        out_file.write(data)

    return str(filename)+" saved!&lt;br /&gt;"
@cherrypy.expose
</t>
<t tx="amd.20160719125734.13">@cherrypy.expose
# 登入表單, 使用 gmail 帳號與密碼登入
def login(self, id=0, *args, **kwargs):
    # 當使用者要求登入時, 將 user session 清除
    #cherrypy.session["user"] = ""
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("login.html")
    return mytemplate.render(site_closed=site_closed, read_only=read_only, id=id)</t>
<t tx="amd.20160719125734.14">@cherrypy.expose
# 登入表單, 使用 gmail 帳號與密碼登入
def login2(self, id=0, *args, **kwargs):
    # 當使用者要求登入時, 將 user session 清除
    #cherrypy.session["user"] = ""
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("login.html")
    return mytemplate.render(site_closed=site_closed, read_only=read_only, id=id)</t>
<t tx="amd.20160719125734.15">@cherrypy.expose
def logincheck(self, id=0, account=None, password=None):
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if account != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if account == "admin":
            # 進入 admin 密碼查驗流程
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
            if hashed_password == saved_password:
                cherrypy.session['user'] = "admin"
                raise cherrypy.HTTPRedirect("/?id="+str(id))
            else:
                return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        else:
            # 一般帳號查驗
            if site_closed == "yes":
                return "抱歉!網站關閉中"
            elif not mail_suffix in account or mail_suffix != "":
                return "抱歉!此類帳號不允許登入"
            else:
                server = smtplib.SMTP('smtp.gmail.com:587')
                server.ehlo()
                server.starttls()
                try:
                    server.login(account, password)
                    server.quit()
                    if "@" in account:
                        account = account.replace('@', '_at_')
                    cherrypy.session["user"] = account
                    #return account+" login successfully."
                    #若登入成功, 則離開前跳到根目錄
                except:
                    server.quit()
                    return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        raise cherrypy.HTTPRedirect("login?id="+str(id))
    raise cherrypy.HTTPRedirect("/?id="+str(id))
</t>
<t tx="amd.20160719125734.16">@cherrypy.expose
def logincheck2(self, id=0, account=None, password=None):
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if account != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if account == "admin":
            # 進入 admin 密碼查驗流程
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
            if hashed_password == saved_password:
                cherrypy.session['user'] = "admin"
                raise cherrypy.HTTPRedirect("/?id="+str(id))
            else:
                return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        else:
            # 一般帳號查驗
            if site_closed == "yes":
                return "抱歉!網站關閉中"
            elif not mail_suffix in account or mail_suffix != "":
                return "抱歉!此類帳號不允許登入"
            else:
                server = smtplib.SMTP('smtp.gmail.com:587')
                server.ehlo()
                server.starttls()
                try:
                    server.login(account, password)
                    server.quit()
                    if "@" in account:
                        account = account.replace('@', '_at_')
                    cherrypy.session["user"] = account
                    #return account+" login successfully."
                    #若登入成功, 則離開前跳到根目錄
                except:
                    server.quit()
                    return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        raise cherrypy.HTTPRedirect("login?id="+str(id))
    raise cherrypy.HTTPRedirect("/?id="+str(id))
</t>
<t tx="amd.20160719125734.17">@cherrypy.expose
def editconfig(self, password=None, password2=None, adsense=None, anonymous=None, \
                mail_suffix=None, site_closed=None, read_only=None):
    filename = "pygroup_config"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    if password == None or adsense == None or anonymous == None:
        return self.error_log("no content to save!")
    # 取出目前的設定值
    old_password, old_adsense, old_anonymous, old_mail_suffix, old_site_closed, old_read_only = self.parse_config(filename=filename)
    if adsense == None or password == None or password2 != old_password or password == '':
        # 傳回錯誤畫面
        return "error&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # 將新的設定值寫入檔案
        file = open(data_dir+filename, "w", encoding="utf-8")
        #  將新的設定值逐一寫入設定檔案中
        file.write("password:"+hashed_password+"\n \
            adsense:"+adsense+"\n \
            anonymous:"+anonymous+"\n \
            mail_suffix:"+mail_suffix+"\n \
            site_closed:"+site_closed+"\n \
            read_only:"+read_only+"\n")
        file.close()
        # 傳回設定檔案已經儲存
        return "config file saved&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
</t>
<t tx="amd.20160719125734.18">@cherrypy.expose
def editconfigform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 config 編輯表單
    # 取出目前的設定值
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editconfigform.html")
    return mytemplate.render(user=user, saved_password=saved_password, adsense=adsense, anonymous=anonymous, mail_suffix=mail_suffix, site_closed=site_closed, read_only=read_only)
</t>
<t tx="amd.20160719125734.19">@cherrypy.expose
def editadsense(self, adsense_content=None):
    filename = "adsense_content"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 將新的設定值寫入檔案
    file = open(data_dir+filename, "w", encoding="utf-8")
    #  將新的設定值逐一寫入設定檔案中
    file.write(adsense_content+"\n")
    file.close()
    # 傳回設定檔案已經儲存
    return "adsense_content file saved"
</t>
<t tx="amd.20160719125734.2">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")
    # 若無字典檔案, 則從 local_目錄中複製
    #if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        #if not os.path.isfile(data_dir+"webster_vocabulary.sqlite"):
            # 尚未完成
    # 假如沒有 adsense_content 則建立一個空白檔案
    if not os.path.isfile(data_dir+"adsense_content"):
        try:
            file = open(data_dir+"adsense_content", "w", encoding="utf-8")
            #  寫入內建的 adsense_content 內容
            adsense_content = '''
&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;

&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;&lt;br /&gt;
'''
            file.write(adsense_content+"\n")
            file.close()
        except:
            print("mkdir error")
    if ormdb == "sqlite":
        # 資料庫使用 SQLite
        # 這裡應該要使用 peewee 建立資料庫與表格
        try:
            conn = sqlite3.connect(data_dir+"task.db")
            cur = conn.cursor()
            # 建立資料表
            cur.execute("CREATE TABLE IF NOT EXISTS task( \
                    id INTEGER PRIMARY KEY AUTOINCREMENT, \
                    name TEXT, \
                    owner TEXT, \
                    type TEXT, \
                    time TEXT, \
                    content TEXT, \
                    ip TEXT, \
                    follow INTEGER);")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    elif ormdb == "mysql":
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_MYSQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_MYSQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_MYSQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_MYSQL_DB_PASSWORD')])
        else:
            host="yourhost"
            port=3306
            db='yourdb'
            user='youruser'
            passwd='yourpassword'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+" CHARACTER SET UTF8;")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    else:
        # 使用 PostgreSQL
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PASSWORD')])
        else:
            host="localhost"
            port=3306
            db='cadp'
            user='root'
            passwd='root'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+";")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
</t>
<t tx="amd.20160719125734.20">@cherrypy.expose
def editadsenseform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 adsense_content 檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 adsense_content 編輯表單
    # 取出目前的設定值
    filename="adsense_content"
    # 取出 adsense_content 後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        saved_adsense = file.read()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editadsenseform.html")
    return mytemplate.render(user=user, saved_adsense=saved_adsense)
</t>
<t tx="amd.20160719125734.21">def parse_config(self, filename):
    #filename = "pygroup_config"
    if not os.path.isfile(data_dir+filename):
        # create config file if there is no config file
        file = open(data_dir+filename, "w", encoding="utf-8")
        # 若無設定檔案, 則逐一寫入 default 值
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # adsense 為 yes 表示要放廣告, 內建 adsense 為 no
        # anonymouse 為 yes 表示允許無登入者可以檢視內容, 內建 anonymous 為 no
        file.write("password:"+hashed_password+"\n \
            adsense:no\n \
            anonymous:no\n \
            user_mail_suffix:\n \
            site_closed:no\n \
            read_only:no\n")
        file.close()
    # 取出設定值後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        config = file.read()
    config_data = config.split("\n")
    password = config_data[0].split(":")[1]
    adsense = config_data[1].split(":")[1]
    anonymous = config_data[2].split(":")[1]
    mail_suffix = config_data[3].split(":")[1]
    site_closed = config_data[4].split(":")[1]
    read_only = config_data[5].split(":")[1]
    return password, adsense, anonymous, mail_suffix, site_closed, read_only
</t>
<t tx="amd.20160719125734.22">@cherrypy.expose
def logout(self, *args, **kwargs):
    cherrypy.session.delete()
    return "已經登出!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    #raise cherrypy.HTTPRedirect("")
</t>
<t tx="amd.20160719125734.23">@cherrypy.expose
def taskeditform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            db.connect()
            # 用 get() 取單筆資料
            data = Task.select().where(Task.id==int(id)).get()
            output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! Not authorized!"
                else:
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskeditform.html")
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data)
            else:
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskeditform.html")
                db.close()
                return mytemplate.render(user=user, id=id, data=data)
        except:
            db.close()
            return "error! Not authorized!"
</t>
<t tx="amd.20160719125734.24">@cherrypy.expose
def taskedit(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    if id == None:
        return "error&lt;br /&gt;&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    try:
        db.connect()
    except:
        time.sleep(0.300)
        db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    # 過濾資料
    content = content.replace('\n', '')
    valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
    tags = ''
    for tag in valid_tags:
        tags += tag
    content = self.strip_tags(content, tags)
    # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
    content = str(content).replace('&lt;/br&gt;', '')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if  user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 請注意這裡曾經犯了 where(id==int(id) 的重大錯誤, 讓所有資料在 update 時只留下一筆資料
            query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
            query.execute()
            output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
            output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
            owner:'''+data.owner+'''&lt;br /&gt;
            name:'''+name+'''&lt;br /&gt;
            type:'''+type+'''&lt;br /&gt;
            time:'''+str(now)+'''&lt;br /&gt;
            content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    else:
        query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
        query.execute()
        output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+data.owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    db.close()
    return output
</t>
<t tx="amd.20160719125734.25">@cherrypy.expose
def taskdeleteform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            # 這裡要區分刪除子緒或主緒資料
            # 若刪除子緒, 則 data 只包含子緒資料, 若為主緒, 則 data 必須包含所有資料
            # 先找出資料, 判定是否為主緒
            # 用 get() 取單筆資料
            db.connect()
            data= Task.select().where(Task.id==int(id)).get()
            owner = data.owner
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! 非資料擁有者, Not authorized!"
                else:
                    if data.follow == 0:
                        # 表示該資料為主緒資料
                        # 資料要重新搜尋, 納入子資料
                        data = Task.select().where((Task.id == id) | (Task.follow == id))
                        output = "資料為主緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, main 表資料為主緒
                        type = "main"
                    else:
                        # 表示該資料為子緒資料
                        # 直接採用 data 資料送到 taskdeleteform.html
                        output = "資料為子緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, alone 表資料為子緒
                        type = "alone"
                    output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskdeleteform.html")
                    # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data, type=type)
            else:
                if data.follow == 0:
                    # 表示該資料為主緒資料
                    # 資料要重新搜尋, 納入子資料
                    data = Task.select().where((Task.id == id) | (Task.follow == id))
                    output = "資料為主緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, main 表資料為主緒
                    type = "main"
                else:
                    # 表示該資料為子緒資料
                    # 直接採用 data 資料送到 taskdeleteform.html
                    output = "資料為子緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, alone 表資料為子緒
                    type = "alone"
                output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskdeleteform.html")
                # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                db.close()
                return mytemplate.render(user=user, id=id, data=data, type=type)
        except:
            db.close()
            return "error! 無法正確查詢資料, Not authorized!"
</t>
<t tx="amd.20160719125734.26">@cherrypy.expose
def taskdelete(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    # 用 get() 取單筆資料
    db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
            if data.follow == 0:
                # 表示資料為主緒
                # 先刪除主緒
                query = Task.at(int(id)).delete()
                query.execute()
                # 再刪除所有對應子緒
                query = Task.delete().where(follow=int(id))
                query.execute()
                output += "所有序列資料已經刪除!&lt;br /&gt;"
            else:
                # 表示資料為子緒
                query = Task.delete().where(Task.id==int(id))
                query.execute()
                output += "資料已經刪除!&lt;br /&gt;"
    else:
        # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
        if data.follow == 0:
            # 表示資料為主緒
            # 先刪除主緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            # 再刪除所有對應子緒
            query = Task.delete().where(Task.follow==int(id))
            query.execute()
            output += '''所有序列資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        else:
            # 表示資料為子緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            output += '''資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
    db.close()
    return output
</t>
<t tx="amd.20160719125734.27"># 不允許使用者直接呼叫 tasksearchform
def tasksearchform(self, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasksearchform.html
    mytemplate = template_lookup.get_template("tasksearchform.html")
    return mytemplate.render(user=user)
</t>
<t tx="amd.20160719125734.3">@cherrypy.expose
def usermenu(self):
    # 這裡包括列出用戶以及列印表單
    user = self.printuser()
    menu = ["login", "logout", "usermenu", "cmsimply", \
                 "tasklist"]
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 usermenu.html
    mytemplate = template_lookup.get_template("usermenu.html")
    return mytemplate.render(user=user, menu=menu)
</t>
<t tx="amd.20160719125734.4">def printuser(self):
    # 取得 user 資料
    try:
        user = cherrypy.session["user"]
    except:
        user = "anonymous"
    if user == "":
        user = "anonymous"
    return user
</t>
<t tx="amd.20160719125734.5"># 不允許使用者直接呼叫 taskform
def taskform(self, id=0, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist.html
    # 針對 id != 0 時, 表示要回應主資料緒, 希望取出與 id 對應的資料標頭, 然後加上 Re:
    mytemplate = template_lookup.get_template("taskform.html")
    return mytemplate.render(user=user, id=id)
</t>
<t tx="amd.20160719125734.6">@cherrypy.expose
def taskaction(self, type=None, name=None, follow=0, content=None, ip=None, *args, **kwargs):
    if content == None or name == "":
        return "標題與內容都不可空白!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        start_time = time.time()
        owner = self.printuser()
        if self.allow_pass(owner) == "no":
            raise cherrypy.HTTPRedirect("login")
        ip = self.client_ip()
        now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
        '''
        # 因為登入後就將 @ 代換為 _at_, 所以此地不用再換
        # user 若帶有 @ 則用 at 代替
        if "@" in owner:
            owner = owner.replace('@', '_at_')
        '''
        content = content.replace('\n', '')
        valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
        tags = ''
        for tag in valid_tags:
            tags += tag
        content = self.strip_tags(content, tags)
        # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
        content = str(content).replace('&lt;/br&gt;', '')
        time_elapsed = round(time.time() - start_time, 5)
        # last insert id 為 data.id
        db.connect()
        # peewee 版本
        data = Task.create(owner=owner, name=str(name), type=type, time=str(now), follow=follow, content=content, ip=str(ip))
        data.save()
        # 這裡要與 taskedit 相同, 提供回到首頁或繼續編輯按鈕
        output = "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
    '''
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        db.close()
        return output
    # 原先直接轉到 tasklist 方法 (index)
    #raise cherrypy.HTTPRedirect("tasklist")
</t>
<t tx="amd.20160719125734.7">@cherrypy.expose
# 從 tasklist 改為 index
def index(self, page=1, item_per_page=5, id=0, flat=0, desc=0, keyword=None, *args, **kwargs):
    user = self.printuser()
    # 這裡不用 self.allow_pass 原因在於需要 adsense 變數
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        if id != 0:
            raise cherrypy.HTTPRedirect("login?id="+id)
        else:
            raise cherrypy.HTTPRedirect("login")
    if adsense == "yes":
        filename = data_dir+"adsense_content"
        with open(filename, encoding="utf-8") as file:
            adsense_content = file.read()
    else:
        adsense_content = ""
    #ip = cherrypy.request.remote.ip
    ip = self.client_ip()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist2.html
    mytemplate = template_lookup.get_template("tasklist.html")
    # 這裡要加入單獨根據 id 號, 列出某一特定資料緒的分支
    # 若 id 為 0 表示非指定列出各別主緒資料, 而是列出全部資料
    # 這時可再根據各筆資料列印時找出各主緒資料的附屬資料筆數
    # 加入 flat = 1 時, 列出所有資料
    # 請注意這裡直接從 tasksearchform.html 中的關鍵字查詢, 指定以 tasklist 執行, 但是無法單獨列出具有關鍵字的 task 資料, 而是子緒有關鍵字時, 也是列出主緒資料
    # 單獨 db 連結與結束
    db.connect()
    if keyword == None:
        if id == 0:
            if flat == 0:
                # 只列出主資料緒
                # desc 為 0 表示要 id 由小到大排序列出資料
                if desc == 0:
                    method = "?"
                    data = Task.select().where(Task.follow==0)
                else:
                    # desc 為 1 表示 id 反向排序
                    method = "?desc=1"
                    data = Task.select().where(Task.follow==0).order_by(Task.id.desc())
            else:
                # flat 為 1 表示要列出所有資料
                # 原先沒有反向排序, 內建使用正向排序
                if desc == 0:
                    method = "?flat=1"
                    data = Task.select()
                else:
                    method = "?flat=1&amp;desc=1"
                    data = Task.select().order_by(Task.id.desc())
        else:
            method = "?id="+str(id)
            # 設法列出主資料與其下屬資料緒, 這裡是否可以改為 recursive 追蹤多緒資料
            # 只列出主緒與下一層子緒資料
            data = Task.select().where((Task.id == id) | (Task.follow == id))
    else:
        # 有關鍵字查詢時(只查 owner, content, type 與 name), 只列出主資料緒
        #flat = 1
        method = "?keyword="+keyword+"&amp;flat="+str(flat)
        data = Task.select().where((Task.content ** ('%%%s%%' % (keyword))) | (Task.name ** ('%%%s%%' % (keyword))) | \
        (Task.owner ** ('%%%s%%' % (keyword))) | \
        (Task.type ** ('%%%s%%' % (keyword))) \
            )
    follow = []
    for task in data:
        follow_data = Task.select().where(Task.follow == task.id).count()
        follow.append(follow_data)
    db.close()
    #
    # 送出 user, id, flat, method 與 data
    #
    # 增加傳送 read_only, 若 read_only = yes 則不列出 taskform, 而且所有新增編輯刪除功能均失效
    #
    return mytemplate.render(user=user, id=id, flat=flat, method=method, data=data,  \
        page=page, item_per_page=item_per_page, ip=ip, follow=follow, keyword=keyword, \
        adsense_content=adsense_content, adsense=adsense, anonymous=anonymous, \
        site_closed=site_closed, read_only=read_only)
    # 其餘分頁 logic 在 mako template tasklist.html 中完成
</t>
<t tx="amd.20160719125734.8">def allow_pass(self, user="anonymous"):
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        return "no"
    else:
        return "yes"
</t>
<t tx="amd.20160719125734.9">## Remove xml style tags from an input string.
#
#  @param string The input string.
#  @param allowed_tags A string to specify tags which should not be removed.
def strip_tags(self, string, allowed_tags=''):
  if allowed_tags != '':
    # Get a list of all allowed tag names.
    allowed_tags_list = re.sub(r'[\\/&lt;&gt; ]+', '', allowed_tags).split(',')
    allowed_pattern = ''
    for s in allowed_tags_list:
      if s == '':
       continue;
      # Add all possible patterns for this tag to the regex.
      if allowed_pattern != '':
        allowed_pattern += '|'
      allowed_pattern += '&lt;' + s + ' [^&gt;&lt;]*&gt;$|&lt;' + s + '&gt;|&lt;!--' + s + '--&gt;'
    # Get all tags included in the string.
    all_tags = re.findall(r'&lt;!--?[^--&gt;&lt;]+&gt;', string, re.I)
    for tag in all_tags:
      # If not allowed, replace it.
      if not re.match(allowed_pattern, tag, re.I):
        string = string.replace(tag, '')
  else:
    # If no allowed tags, remove all.
    string = re.sub(r'&lt;[^&gt;]*?&gt;', '', string)
 
  return string
</t>
<t tx="amd.20160719130552.1">@app.route("/index2")
def index2(self):
    return "this is index2"</t>
<t tx="amd.20160719131148.1">https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications

意思是說, 應該要將 PyGroup 與 CMSimfly 寫成 blueprint 格式套用</t>
<t tx="amd.20160719132540.1">@language python
@tabwidth -4
&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="amd.20160719132540.2">from flask import Blueprint, render_template, current_app, \
    send_from_directory, session, redirect, url_for
import os

# 這裡設定的 template_folder 為 template 搜尋目錄, 表示位於 user/g1/templates 目錄中
# 但是若 wcmw14/templates 目錄中有相同名稱的 template file, 則優先取外部的檔案
# 這樣的設計希望可以在統整各藍圖時, 可以隨時根據需要改寫 template 配置
pygroup_app = Blueprint('pygroup', __name__, url_prefix='/pg', template_folder='templates')




</t>
<t tx="amd.20160719132540.3">@pygroup_app.route('/')
def helloworld():
    user = "Yen"
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
    return render_template('g1index.html', user=user)</t>
<t tx="amd.20160719132540.4">@pygroup_app.route('/threegear', defaults={'n1':15,'n2':20,'n3':18})
@pygroup_app.route('/threegear/&lt;n1&gt;/&lt;n2&gt;/&lt;n3&gt;')
def threegear(n1, n2, n3):
    # 真正最後的架構應該要在函式中準備繪圖所需的資料, 然後用 template 呈現內容
    title = "網際 2D 繪圖"
    head = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;'''+ title +'''&lt;/title&gt;
    &lt;!-- IE 9: display inline SVG --&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=9"&gt;
'''
    script = '''
&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;
 
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
'''
    headstring = head + script + "&lt;/head&gt;"
    # 能否根據 n1, n2, n3 與 width, 算出合理的 height
    # 模數計算 m = canvas.width*0.8/(n1+n2+n3)
    # max([int(n1), int(n2), int(n3)])
    # 所以 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    body = '''
    
延伸應用:&lt;br /&gt;

軸孔加入 keyway &lt;br /&gt;
與 3D 零件設計繪圖對應 &lt;br/&gt;
與 2D/3D 軸的設計與繪圖對應&lt;br /&gt;&lt;br /&gt;
&lt;canvas id='gear1' width='800' height="'''+str(int(height))+'''"&gt;&lt;/canvas&gt;
 
&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math
 
# 主要用來取得畫布大小
canvas = doc["gear1"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)
 
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("gear1")
 
######################################
# 畫正齒輪輪廓
#####################################
def spur(cx, cy, m, n, pa, theta):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
 
    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree
    # theta 為角度
    gearTooth.rotate(theta) 
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
 
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True
 
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    # 接著繪製齒輪的基準線
    deg = math.pi/180
    Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], "PATH", {
          'strokeColor':'blue', 'lineWidth': 1})
    cgo.render(Line)
 
# 3個齒輪的齒數
n1 = '''+str(n1)+'''
n2 = '''+str(n2)+'''
n3 = '''+str(n3)+'''
 
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
# 利用 80% 的畫布寬度進行繪圖
# 計算模數的對應尺寸
m = canvas.width*0.8/(n1+n2+n3)
 
# 根據齒數與模組計算各齒輪的節圓半徑
pr1 = n1*m/2
pr2 = n2*m/2
pr3 = n3*m/2
 
# 畫布左右兩側都保留畫布寬度的 10%
# 依此計算對應的最左邊齒輪的軸心座標
cx = canvas.width*0.1+pr1
cy = canvas.height/2
 
# pa 為壓力角
pa = 25
 
# 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy)
spur(cx, cy, m, n1, pa, 0)
# 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊
# 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合
# 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n
spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2)
# 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置
# 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合
# 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度
# 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3
spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3)
&lt;/script&gt;
'''
    bodystring = "&lt;body&gt;" + body+"&lt;/body&gt;"
    endstring = "&lt;/html&gt;"
    outstring = headstring + bodystring + endstring
    return outstring
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
   # return render_template('g1index.html', user=user)</t>
<t tx="amd.20160719132540.5">@pygroup_app.route('/canvas', defaults={'id': 'plotarea', 'height': 800, 'm': 10})
@pygroup_app.route('/canvas/&lt;id&gt;', defaults={'height': 800, 'm': 10})
@pygroup_app.route('/canvas/&lt;id&gt;/&lt;height&gt;', defaults={ 'm': 10})
@pygroup_app.route('/canvas/&lt;id&gt;/&lt;height&gt;/&lt;m&gt;')
def canvas(id, height, m):
    # width 為 800
    # 當協同繪圖時, 提供 canvas 的組員必須算出合用的 height 值與模數 m 值
    # 真正最後的架構應該要在函式中準備繪圖所需的資料, 然後用 template 呈現內容
    title = "網際 2D 繪圖"
    head = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;'''+ title +'''&lt;/title&gt;
    &lt;!-- IE 9: display inline SVG --&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=9"&gt;
'''
    script = '''
&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;
 
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
'''
    headstring = head + script + "&lt;/head&gt;"
    # 能否根據 n1, n2, n3 與 width, 算出合理的 height
    # 模數計算 m = canvas.width*0.8/(n1+n2+n3)
    # max([int(n1), int(n2), int(n3)])
    # 所以 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    #height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    body = '''
    
延伸應用:&lt;br /&gt;

軸孔加入 keyway &lt;br /&gt;
與 3D 零件設計繪圖對應 &lt;br/&gt;
與 2D/3D 軸的設計與繪圖對應&lt;br /&gt;&lt;br /&gt;
&lt;canvas id="'''+str(id)+'''" width='800' height="'''+str(int(height))+'''"&gt;&lt;/canvas&gt;
&lt;script type="text/python" id="main"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math

# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)
 
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("'''+str(id)+'''")
 
######################################
# 畫正齒輪輪廓
#####################################
def spur(cx, cy, m, n, pa, theta):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
 
    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree
    # theta 為角度
    gearTooth.rotate(theta) 
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
 
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True
 
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    # 接著繪製齒輪的基準線
    deg = math.pi/180
    Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], "PATH", {
          'strokeColor':'blue', 'lineWidth': 1})
    cgo.render(Line)
&lt;/script&gt;
&lt;script type="text/python" src="/static/gear1.py"&gt;&lt;/script&gt;
&lt;script type="text/python" src="/static/gear2.py"&gt;&lt;/script&gt;
'''
    bodystring = "&lt;body&gt;" + body+"&lt;/body&gt;"
    endstring = "&lt;/html&gt;"
    outstring = headstring + bodystring + endstring
    return outstring
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
   # return render_template('g1index.html', user=user)</t>
<t tx="amd.20160719132540.6">@pygroup_app.route('/listfiles')
def listfiles():
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 利用導入 flask 的 current_app 取得在主應用程式中所設置的 config 變數
    download_dir = current_app.config.get('download_dir')
    files = os.listdir(download_dir)
    file_string = "&lt;a href='/index'&gt;Home&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
    if len(files) == 0:
        return file_string + "no file!"
    for filename in files:
        file_string += "&lt;a href='/g1/get/"+filename+"'&gt;"+filename+" &lt;br /&gt;"
    return file_string</t>
<t tx="amd.20160719132540.7">@pygroup_app.route('/get/&lt;filename&gt;')
def get(filename):
    # 先檢查使用者是否處於登入狀態, 若尚未登入則跳轉到登入畫面
    if not session.get('login_email'):
        #abort(401)
        return redirect(url_for('login'))
    # 利用導入 flask 的 current_app 取得在主應用程式中所設置的 config 變數
    download_dir = current_app.config.get('download_dir')
    return send_from_directory(download_dir, filename)</t>
<t tx="course-mde-tw.20140417093332.1998"></t>
<t tx="course-mde-tw.20140417093332.1999">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="course-mde-tw.20140417093332.2000">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="course-mde-tw.20140417093332.2001"></t>
<t tx="course-mde-tw.20140417093332.2027"></t>
<t tx="course-mde-tw.20140417093332.2047">各組的報告統一放在 doc 目錄下, 並且按照分組編號作為目錄名稱

最後希望能夠利用程式整合各分組報告內容, 統一處理成為 pdf 與 html 檔案

目錄架構:

doc 
    2ag1
        doc.txt
    2ag2
        doc.txt</t>
<t tx="course-mde-tw.20140417093332.2048"></t>
<t tx="course-mde-tw.20140417093332.2049"></t>
<t tx="course-mde-tw.20140417093332.2051"></t>
<t tx="course-mde-tw.20140417093332.2058">@language latex

% 中文內容設定

\usepackage{xeCJK}    % 中英文字行分開設置
\usepackage[T1]{fontspec}    %設定字體用
\usepackage{graphicx}
\usepackage{fancyvrb} % for frame on Verbatim
% 新細明體
% 文鼎ＰＬ新宋
\setCJKmainfont{新細明體}</t>
<t tx="course-mde-tw.20140417093332.2059">@language python
import os
'''
c is the commander of the outline containing the script.
g is Leo's leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
d = c.scanAllDirectives(p)
#g.es(d)
# d 為 commander 由目前所在目錄進行指令設定掃描
# d 資料格式為 dictionary
''' 
實際操作下, d 為 
{'tabwidth': -4, 'lineending': None, 'language': 'python', 'encoding': None, 'pluginsList': [], 'pagewidth': 70, 'wrap': True, 'path': 'D:\\github\\mdeCourse\\2013spring', 'delims': ('#', '', '')}
'''
#在處理 pandoc 之前,  將協同人員上傳的 file1.txt 與 file2.txt 結合為 demo.txt
# 應該以 walkdir 走進各目錄取檔案名稱後, 然後依照字串排序決定先後次序
filenames = ['title.txt', '2ag1/doc.txt', '2ag2/doc.txt', 'coursemdetw/doc.txt']
directory = "V:/project/2014cda/wsgi/doc/"
with open('V:/project/2014cda/wsgi/pandoc/result.txt', 'w', encoding="utf-8") as outfile:
    for fname in filenames:
        fname = directory+fname
        with open(fname, encoding="utf-8") as infile:
            for line in infile:
                outfile.write(line)
            outfile.write("\n\n")

# 將目錄指到 pandoc
mandir = d.get('path') + "/wsgi/pandoc"
g.es(mandir)
os.chdir(mandir)
# 先轉一份 html 
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt -o result.html")
# 利用 pandoc 將 demo.txt 轉為 demo.tex, 在此決定是否要有 toc
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt --toc -o result.tex")
# 中文設定必須要放在 begin document 之前
setup = ''' 
\\usepackage{xeCJK}    % 中英文字行分開設置 
\\usepackage[T1]{fontspec}    %設定字體用 
\\usepackage{graphicx} 
\\usepackage{fancyvrb} % for frame on Verbatim 
\\setCJKmainfont{新細明體}
'''
# 在 demo.tex 最前頭加上"中文設定"
file = open("result.tex", "r", encoding="utf-8")
lines = file.read().splitlines()
file.close()
file = open("result.tex", "w", encoding="utf-8")
for i in range(len(lines)):
    # 設法將中文設定放在文件開始之前, 以便蓋掉之前的設定
    if "\\begin{document}" in lines[i]:
        file.write(setup+lines[i]+"\n")
    else:
        file.write(lines[i]+"\n")
file.close()
target_name = "result"
filename = target_name+".tex"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
filename = target_name+".xdv"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xdvipdfmx.exe -vv -E "+filename)

filename = target_name+".pdf"
os.system(filename)</t>
<t tx="course-mde-tw.20140417093332.2060"></t>
<t tx="course-mde-tw.20140422171455.1745">在 Github 倉儲中將 OpenShift 倉儲設為 remote 倉儲

git remote add openshift ssh://5356315e4382ec2b3f000557@2014cda-mdenfu.rhcloud.com/~/git/2014cda.git/

利用 git pull 拉下目前位於 OpenShift 對應倉儲上的程式碼

git pull 的目的在設法讓 OpenShift 與 Github 中的 git 專案合併

若與 Github 近端倉儲中的資料沒有產生衝突, 則可以在內容修改後, 同時 push 到 Github 與 OpenShift

目前 OpenShift 網站: http://2014cda-mdenfu.rhcloud.com/

Github 倉儲則為: https://github.com/coursemdetw/2014cda

目前的規劃是讓參與協同者可以自由更新 Github 倉儲內容

並且將 Github 倉儲與各組可以控制的 OpenShift 網站同步</t>
<t tx="course-mde-tw.20140422221207.1747">mathspec.sty 檔案必須放在 pandoc 目錄中, 與文書處理原始檔案放在一起.</t>
</tnodes>
</leo_file>
